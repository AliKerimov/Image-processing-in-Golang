
	fmt.Println("File Upload Endpoint Hit")
    file :=io.LimitReader(r.Body,10*1024*1024)   
    //!Give random name to img
    str :=randomString(5)+".png"
    dst, err := os.Create(str)
	defer dst.Close()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if _, err := io.Copy(dst, file); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
    filepath :="C:/Users/ASUS/Desktop/task2/"+str
    catFile, err := os.Open(filepath)
    if err != nil {
        log.Fatal(err)
    }
    defer catFile.Close()
 
    imData, imType, err := image.Decode(catFile)
    fmt.Println(imData)
    fmt.Println(imType)
    if err != nil {
        fmt.Println(err)
    }
    cat, err := png.Decode(catFile)
    if err != nil {
        log.Fatal(err)
    }
    // fmt.Println(cat)
    png.Encode(w, cat)
    w.Write([]byte("jh"))
    
    
    // file, err := os.Open("s.png") 
    // if err != nil { 
    //   fmt.Printf("error occured! 2")
    //   return
    // } 
    // defer file.Close() 
    // fileInfo, _ := file.Stat() 
    // size := fileInfo.Size() 
    // buffer := make([]byte, size) // read file content to buffer 
   
    // file.Read(buffer) 
    // fileBytes := bytes.NewReader(buffer) 
    // fileType := http.DetectContentType(buffer) 
    // path := "/media/" + file.Name() 
    // params := &s3.PutObjectInput{ 
    //   Bucket: aws.String("testBucket"), 
    //   Key: aws.String(path), 
    //   Body: fileBytes, 
    //   ContentLength: aws.Int64(size), 
    //   ContentType: aws.String(fileType), 
    // } 
    // resp, err := svc.PutObject(params) 
    // if err != nil { 
    //   // handle error
    //   fmt.Printf("error occured!")
    //   return
    // } 
    // fmt.Printf("response %s", awsutil.StringValue(resp)) 
}



